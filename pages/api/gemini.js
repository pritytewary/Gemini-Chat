import axios from "axios";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { prompt, context } = req.body;
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY;

    if (!apiKey) {
      return res
        .status(500)
        .json({ error: "Gemini API key is not configured" });
    }

    const contents = [];

    if (context && Array.isArray(context)) {
      contents.push(
        ...context.map((msg) => ({
          role: msg.role === "user" ? "user" : "model",
          parts: [{ text: msg.content }],
        }))
      );
    }

    contents.push({
      role: "user",
      parts: [{ text: prompt }],
    });

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`,
      {
        contents: contents,
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    const generatedText =
      response.data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      return res.status(400).json({
        error: "No text was generated by the Gemini API",
      });
    }

    res.status(200).json({
      generated_text: generatedText,
    });
  } catch (error) {
    console.error(
      "Error communicating with Gemini API:",
      error.response?.data || error.message
    );

    res.status(500).json({
      error: "Error processing your request",
      details: error.response?.data?.error || error.message,
    });
  }
}
